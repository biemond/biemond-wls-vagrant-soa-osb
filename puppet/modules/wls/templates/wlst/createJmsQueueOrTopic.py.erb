
wlsUser    = '<%= @wlsUser %>'  
password   = '<%= @password %>' 
machine    = '<%= @address %>'  
portNumber = '<%= @port %>'     

jmsQuota            = ""
subDeploymentName   = ""
timeToLive          = ""
limit               = ""
deliveryDelay       = ""

useLogRedirect      = "false"
useRedirect         = "false"
loggingPolicy       = ""

#subDeploymentName, jmsModuleName, jmsName,jmsJNDIName,jmsType,distributed,balancingPolicy,useRedirect,limit,policy,errorObject,jmsQuota,timeToLive
<% @params.each do |param| -%>   
<%= param %>                    
<% end -%>                      

useStoreConfig = '<%= @useStoreConfig %>'

if useStoreConfig != "true":
    connect(wlsUser,password,'t3://'+machine+':'+portNumber)
else:
    connect(userConfigFile='<%= @userConfigFile %>', userKeyFile='<%= @userKeyFile %>', url='t3://'+machine+':'+portNumber)    



print "subDeploymentName: ", subDeploymentName, " jmsModule: ", jmsModuleName, "Name: ",jmsName , "JNDIName: ",jmsJNDIName

edit()
startEdit()

try:
    cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName)
     
    if jmsType == "queue":
        if distributed == "true":
            cmo.createUniformDistributedQueue(jmsName)
            jmsWlsType = '/UniformDistributedQueues/'
        else:
            cmo.createQueue(jmsName)
            jmsWlsType = '/Queues/'
    if jmsType == "topic":
        if distributed == "true":
            cmo.createUniformDistributedTopic(jmsName)
            jmsWlsType = '/UniformDistributedTopics/'
        else:
            cmo.createTopic(jmsName)
            jmsWlsType = '/Topics/'
     
    cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName)
    cmo.setJNDIName(jmsJNDIName)

    if subDeploymentName:
      cmo.setSubDeploymentName(subDeploymentName)

    print "distributed: ",distributed
    if distributed == "true" and jmsType == "queue":
      print "distributed"
      cmo.setLoadBalancingPolicy(balancingPolicy)

    print "error queue redirect: ",useRedirect
    if useRedirect == "true":
      print "redirect to ",errorObject
      cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName+'/DeliveryFailureParams/'+jmsName)
      if limit:
        print "limit"
        cmo.setRedeliveryLimit( int(limit) )

      cmo.setExpirationPolicy(policy)

      if distributed == "true":
        cmo.setErrorDestination(getMBean('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/UniformDistributedQueues/'+errorObject))
      else:
        cmo.setErrorDestination(getMBean('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/Queues/'+errorObject))

    print "logging redirect: ",useLogRedirect
    if useLogRedirect == "true":
      print "redirect to log "
      cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName+'/DeliveryFailureParams/'+jmsName)
      if limit:
        print "limit"
        cmo.setRedeliveryLimit( int(limit) )

      cmo.setExpirationPolicy('Log')
      if loggingPolicy:
        cmo.setExpirationLoggingPolicy(loggingPolicy)

    if timeToLive:
      print "time To Live"
      cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName+'/DeliveryParamsOverrides/'+jmsName)
      cmo.setTimeToLive(timeToLive)                                

    if deliveryDelay: 
      print "RedeliveryDelay"
      cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName+'/DeliveryParamsOverrides/'+jmsName)
      cmo.setRedeliveryDelay( int(deliveryDelay))

    if jmsQuota:
      print "jms Quota"
      cd('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+jmsWlsType+jmsName)
      cmo.setQuota(getMBean('/JMSSystemResources/'+jmsModuleName+'/JMSResource/'+jmsModuleName+'/Quotas/'+jmsQuota ))

    save()
    activate()          
except:
    print "Unexpected error:", sys.exc_info()[0]
    undo('true','y')
    stopEdit('y')